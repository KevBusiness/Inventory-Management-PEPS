generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  credential Int @unique
  name String?
  lastname String?
  password String
  role Role
  tickets Ticket[]
  outputs Output[]
  adjustmentInventory InventoryAdjustment[]
  notifications Notification[]
  seenNotifications NotificationView[]
  @@map("users")
}

enum Role {
  Owner
  Supervisor
  Employed
}

model Ticket {
  id Int @id @default(autoincrement())
  total Float
  status TicketStatus
  orderDate DateTime @default(now())
  deliveryDate DateTime?
  updatedAt DateTime @updatedAt
  sales Output[]
  flowers Flower[]
  userId Int
  user User @relation(fields: [userId], references: [id])
  @@map("tickets")
}

enum TicketStatus {
  Pedido
  Disponible
  Agotado
}
model Output {
  id Int @id @default(autoincrement())
  createdBy Int
  ticketId Int
  sales saleTransaction[]
  total Float
  user User @relation(fields: [createdBy], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  @@map("outputs")
}

model FlowerBox {
  id Int @id @default(autoincrement())
  name String
  min Int?
  code Int?
  description String?
  currentWiltedPrice Float?
  flowers Flower[]
  products Product[]
  @@map("flowerBoxes")
}
model Location {
  id Int @id @default(autoincrement())
  name String
  Flowers Flower[]
  @@map("locations")
}
model Flower {
  id Int @id @default(autoincrement())
  current_price Float
  purchase_price Float?
  currentStockFresh Int
  currentwiltedFlowers Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flowerBoxId Int
  locationId Int?
  ticketId Int
  flowerBox FlowerBox @relation(fields: [flowerBoxId], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [locationId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  saleTransactions saleTransaction[]
  adjustmentInventory InventoryAdjustment[]
  FlowerHistory FlowerHistory[]
  @@map("flowers")
}

model saleTransaction {
  id Int @id @default(autoincrement())
  price Float
  quantity Int
  quality Quality
  saleDate DateTime @default(now())
  flowerId Int
  outputId Int
  productId Int?
  flower Flower @relation(fields: [flowerId], references: [id], onDelete: Cascade)
  output Output @relation(fields: [outputId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  @@map("sale_transactions")
}

enum Quality {
  Fresca
  Marchita
}

model Product {
  id Int @id @default(autoincrement())
  name String
  quantity Int
  price Float?
  uses saleTransaction[]
  to_use Int
  Flowers FlowerBox @relation(fields: [to_use], references: [id], onDelete: Cascade)
}

model InventoryAdjustment {
  id Int @id @default(autoincrement())
  flowerId Int
  createdBy Int
  wiltedQuantity Int
  freshQuantity Int
  reason String
  adjustmentDate DateTime @default(now())
  flower Flower @relation(fields: [flowerId], references: [id], onDelete: Cascade)
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  @@map("inventory_adjustments")
}

model FlowerHistory {
  id Int @id @default(autoincrement())
  price Float
  wiltedQuantity Int
  freshQuantity Int
  reason String?
  flowerId Int
  flower Flower @relation(fields: [flowerId], references: [id], onDelete: Cascade)
  @@map("history_flowers")
}

model Notification {
  id Int @id @default(autoincrement())
  activity String
  createdAt DateTime @default(now())
  createdBy Int
  seenBy NotificationView[]
  user User @relation(fields: [createdBy], references: [id])
  @@map("notifications")
}

model NotificationView {
  id Int @id @default(autoincrement())
  notificationId Int
  userId Int
  seenAt DateTime @default(now())
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  @@unique([notificationId, userId])
  @@map("notification_views")
}
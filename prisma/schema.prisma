generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  credential Int @unique
  name String?
  lastname String?
  password String
  role Role
  tickets Ticket[]
  // outputs Output[]
  transactions saleTransaction[]
  adjustmentInventory InventoryAdjustment[]
  notifications Notification[]
  seenNotifications NotificationView[]
  @@map("users")
}

enum Role {
  Owner
  Supervisor
  Employed
}

model Ticket {
  id Int @id @default(autoincrement())
  total Float
  status TicketStatus
  orderDate DateTime @default(now())
  deliveryDate DateTime?
  updatedAt DateTime @updatedAt
  process Boolean? @default(false)
  folio Int @unique
  sales saleTransaction[]
  flowers Flower[]
  userId Int
  user User @relation(fields: [userId], references: [id])
  @@map("tickets")
}

enum TicketStatus {
  Pedido
  Disponible
  Agotado
}
// model Output {
//   id Int @id @default(autoincrement())
//   createdBy Int
//   ticketId Int
//   sales saleTransaction[]
//   total Float
//   createdAt DateTime @default(now())
//   user User @relation(fields: [createdBy], references: [id])
//   ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
//   @@map("outputs")
// }
model InventoryAdjustment {
  id Int @id @default(autoincrement())
  createdBy Int
  ticketId Int
  adjusts adjustTransaction[]
  createdAt DateTime @default(now())
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  @@map("inventory_adjustments")
}

model FlowerBox {
  id Int @id @default(autoincrement())
  name String
  min Int?
  code Int?
  description String?
  currentPrice Float?
  purchasePrice Float?
  currentWiltedPrice Float?
  locationId Int?
  flowers Flower[]
  location Location? @relation(fields: [locationId], references: [id])
  @@map("flowerBoxes")
}
model Location {
  id Int @id @default(autoincrement())
  name String
  defaultLocation Boolean? @unique
  Flowers Flower[]
  FlowerBox FlowerBox[]
  @@map("locations")
}
model Flower {
  id Int @id @default(autoincrement())
  current_price Float
  purchase_price Float?
  initialAmount Int
  currentStockFresh Int
  currentwiltedFlowers Int?
  min Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flowerBoxId Int
  locationId Int?
  ticketId Int
  flowerBox FlowerBox @relation(fields: [flowerBoxId], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [locationId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  saleTransactions saleTransaction[]
  adjustTransactions adjustTransaction[]
  FlowerHistory FlowerHistory[]
  @@map("flowers")
}

model saleTransaction {
  id Int @id @default(autoincrement())
  price Float
  quantity Int
  quality Quality
  saleDate DateTime @default(now())
  priceIndividual Float?
  flowerId Int?
  outputId Int?
  productId Int?
  createdBy Int?
  ticketId Int?
  user User? @relation(fields: [createdBy], references: [id])
  flower Flower? @relation(fields: [flowerId], references: [id], onDelete: Cascade)
  // output Output? @relation(fields: [outputId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  ticket Ticket? @relation(fields: [ticketId], references: [id])
  @@map("sale_transaction")
}

enum Quality {
  Fresca
  Marchita
}

model adjustTransaction {
  id Int @id @default(autoincrement())
  amount Int
  type String
  total Float
  reason String?
  adjustDate DateTime @default(now())
  flowerId Int
  adjustInventoryId Int
  flower Flower @relation(fields: [flowerId], references: [id], onDelete: Cascade)
  inventory InventoryAdjustment @relation(fields: [adjustInventoryId], references: [id])
  @@map("adjust_transaction")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  price Float
  picture String
  flowers String
  sales saleTransaction[]
  @@map("Products")
}


model FlowerHistory {
  id Int @id @default(autoincrement())
  wiltedQuantity Int
  freshQuantity Int
  flowerId Int
  createdAt DateTime @default(now())
  flower Flower @relation(fields: [flowerId], references: [id], onDelete: Cascade)
  @@map("history_flowers")
}

model Notification {
  id Int @id @default(autoincrement())
  concept String
  activity String
  createdAt DateTime @default(now())
  createdBy Int
  seenBy NotificationView[]
  user User @relation(fields: [createdBy], references: [id])
  @@map("notifications")
}

model NotificationView {
  id Int @id @default(autoincrement())
  notificationId Int
  userId Int
  seenAt DateTime @default(now())
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  @@unique([notificationId, userId])
  @@map("notification_views")
}